#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;


// 부모 노드(더 작은 숫자의 노드)를 가져옴 
int getParent(int set[], int x) {
	if (set[x] == x) return x;
	return set[x] = getParent(set, set[x]);
}

// 부모 노드를 병합 
void unionParent(int set[], int a, int b) {
	a = getParent(set, a);
	b = getParent(set, b);
	// 더 숫자가 작은 부모로 병합 (1하고 7이 연결되있으면 1이 7의 부모노드)
	if (a < b) set[b] = a;
	else set[a] = b;
}

// 같은 부모를 가지는지 확인
int find(int set[], int a, int b) {
	a = getParent(set, a);
	b = getParent(set, b);
	if (a == b) return 1;
	else return 0;
}

// 간선 클래스 선언 
class Edge {
public:
	int node[2];
	int distance;
	Edge(int a, int b, int distance) {
		this->node[0] = a;
		this->node[1] = b;
		this->distance = distance;
	}
	bool operator <(Edge& edge) { //sort 함수 연계
		return this->distance < edge.distance;
	}
};

int main(void) {
	
	int n, m;
	
	int a, b, c;

	cin >> n >> m;


	vector<Edge> v;

	for (int i = 0; i < m; i++)
	{
		cin >> a >> b >> c;
		v.push_back(Edge(a,b,c));
		
		if (i == m - 1) cout << "0 0"<<endl;
	}



	// 간선의 비용으로 오름차순 정렬 
	sort(v.begin(), v.end());
	//작은 거리가중치부터 먼저 시작되니까 나중에 중복되는 간선값을 넘기는 건 무조건 이 간선가중치보다 큰 값.
	//따라서 나중에 최소신장트리 만들기에 적합 

	int* set = new int[n]; //배열 동적할당
	for (int i = 0; i < n; i++) {
		set[i] = i; //일단 각자의 부모노드는 각자노드로 정한다.
	}

	// 거리의 합을 0으로 초기화 
	int sum = 0;
	int max = 0;

	for (int i = 0; i < v.size(); i++) {
		// 동일한 부모를 가르키지 않는 경우, 즉 사이클이 발생하지 않을 때만 선택 
		if (!find(set, v[i].node[0] , v[i].node[1])) {	
			sum += v[i].distance;
			unionParent(set, v[i].node[0] , v[i].node[1] );
			
		}
	}

	printf("%d\n", max-sum); 


	delete[] set;
}